const ods = require('../ods.js')


// Test internal base functions with ArrayStack data structure
test('ArrayStack max', () => {
	let a = new ods.ArrayStack()
	expect(a._max(1,5)).toBe(5)
	expect(a._max(5,1)).toBe(5)
	expect(a._max(-5,5)).toBe(5)
	expect(a._max(5,-5)).toBe(5)
})

test('ArrayStack index range', () => {
	let a = new ods.ArrayStack()
	expect(() => a._indexWithinRange(1)).toThrowError('IndexError')
	expect(() => a._indexWithinRange(-1)).toThrowError('IndexError')
})

test('ArrayStack append', () => {
	let a = new ods.ArrayStack()
	a.append(0)
	expect(a.length).toBe(1)
	expect(a.array).toEqual([0])
	a.append(1)
	expect(a.length).toBe(2)
	expect(a.array).toEqual([0,1])
	a.append(2)
	expect(a.length).toBe(3)
	expect(a.array).toEqual([0,1,2,undefined])
})

test('ArrayStack addFirst', () => {
	let a = new ods.ArrayStack()
	a.addFirst(0)
	expect(a.length).toBe(1)
	expect(a.array).toEqual([0])
	a.addFirst(1)
	expect(a.length).toBe(2)
	expect(a.array).toEqual([1,0])
	a.addFirst(2)
	expect(a.length).toBe(3)
	expect(a.array).toEqual([2,1,0,undefined])
})

test('ArrayStack addLast', () => {
	let a = new ods.ArrayStack()
	a.addLast(0)
	expect(a.length).toBe(1)
	expect(a.array).toEqual([0])
	a.addLast(1)
	expect(a.length).toBe(2)
	expect(a.array).toEqual([0,1])
	a.addLast(2)
	expect(a.length).toBe(3)
	expect(a.array).toEqual([0,1,2,undefined])
})

test('ArrayStack removeFirst', () => {
	let a = new ods.ArrayStack()
	a.append(0)
	a.append(1)
	a.append(2)
	a.removeFirst()
	expect(a.length).toBe(2)
	expect(a.array).toEqual([1,2])
	a.removeFirst()
	expect(a.length).toBe(1)
	expect(a.array).toEqual([2])
	a.removeFirst()
	expect(a.length).toBe(0)
	expect(a.array).toEqual([undefined])
})

test('ArrayStack removeLast', () => {
	let a = new ods.ArrayStack()
	a.append(0)
	a.append(1)
	a.append(2)
	a.removeLast()
	expect(a.length).toBe(2)
	expect(a.array).toEqual([0,1])
	a.removeLast()
	expect(a.length).toBe(1)
	expect(a.array).toEqual([0])
	a.removeLast()
	expect(a.length).toBe(0)
	expect(a.array).toEqual([undefined])
})
